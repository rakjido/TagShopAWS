<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.UsersDao">
	<insert id="insertUsers" parameterType="vo.UsersVo">
        INSERT INTO USERS (USERID, PASSWORD, ENABLED, EMAIL, PHONE, CREATEDATE, UPDATEDATE)
        VALUES (#{userid}, #{password}, FALSE, #{email}, #{phone}, NOW(), NOW())
    </insert>
	
	<select id="idCheck" resultType="int">
		SELECT COUNT(*) AS CNT FROM USERS WHERE USERID = #{userid}
	</select>
	
	<select id="loginCheck" resultType="int">
		SELECT COUNT(*) AS CNT FROM USERS WHERE USERID = #{param1} AND PASSWORD = #{param2} 
	</select>
	
	<select id="getUsers" resultType="vo.UsersVo">
		SELECT USERID, PASSWORD, ENABLED, EMAIL, PHONE, CREATEDATE, UPDATEDATE 
		FROM USERS WHERE USERID = #{userid}
	</select>
	
	<update id="updateUsers" parameterType="vo.UsersVo">
		UPDATE USERS
			 SET      EMAIL = #{email}, 
			          PHONE = #{phone}, 
			          UPDATEDATE = NOW() 
		WHERE USERID  = #{userid}
	</update>
	
	<update id="updateKey" parameterType="HashMap">
        UPDATE USERS
        SET EMAILKEY = #{emailkey}
        WHERE USERID = #{userid}
    </update>
    
    <update id = "alter_userKey" parameterType="HashMap">
       UPDATE USERS
       SET ENABLED = TRUE
       WHERE USERID = #{userid} AND EMAILKEY = #{emailkey}
   </update>
   
   <update id="updateUsersPassword" parameterType="HashMap">
		UPDATE USERS
			 SET  PASSWORD = #{password}
		WHERE USERID  = #{userid}
	</update>
   
   <select id="getEnabledUsers" resultType="vo.UsersVo">
        SELECT USERID, PASSWORD, ENABLED, EMAIL, PHONE, CREATEDATE, UPDATEDATE 
        FROM USERS WHERE ENABLED = 1
    </select>
    
	<select id="recommend" resultType="vo.RecommendVo">
        <![CDATA[
            SELECT TB.RNUM, TB.USERID, PROF.PHOTONAME, PROF.INTRODUCTION
            FROM(
                SELECT @RNUM:=@RNUM+1 AS RNUM, USERID
                FROM(
                    SELECT E.USERID
                    FROM(
                        SELECT USERID
                        FROM(
                            SELECT USERID
                            FROM(
                                SELECT DISTINCT USERID
                                    FROM(
                                        SELECT USERSUSERID AS USERID
                                        FROM TAGSHOP.LIKES
                                        WHERE PHOTOID IN (
                                            SELECT PHOTOID
                                            FROM TAGSHOP.LIKES
                                            WHERE USERSUSERID = #{userid}
                                            AND LIKEYN=TRUE
                                        )
                                        UNION ALL
                                        SELECT USERSUSERID AS USERID
                                        FROM TAGSHOP.COMMENTS
                                        WHERE PHOTOID IN (
                                            SELECT PHOTOID
                                            FROM TAGSHOP.COMMENTS
                                            WHERE USERSUSERID = #{userid}
                                        )
                                        UNION ALL
                                        SELECT FOLLOWERID AS USERID
                                        FROM TAGSHOP.FOLLOWER
                                        WHERE USERSUSERID = #{userid}
                                    ) AS A
                                ) AS B ORDER BY RAND()
                            ) AS C
                        WHERE USERID NOT IN(#{userid})
                    )AS E
                    WHERE E.USERID NOT IN(#{userid})
                ) AS TBA LEFT OUTER JOIN (SELECT * FROM TAGSHOP.FOLLOWING WHERE USERSUSERID=#{userid}) AS TBB
                ON TBA.USERID=TBB.FOLLOWINGID, (SELECT @RNUM:=0) AS DD
                WHERE TBB.FOLLOWINGID IS NULL
            )AS TB JOIN TAGSHOP.PROFILE AS PROF
            ON PROF.USERID=TB.USERID
            WHERE TB.RNUM<=5;
        ]]>
    </select>

	<insert id="insertSNS" parameterType="vo.SnsUserVo">
        INSERT INTO USERS (USERID, PASSWORD, ENABLED, EMAIL, CREATEDATE, UPDATEDATE)
        VALUES (#{userid}, #{password}, #{enabled}, #{email}, NOW(), NOW())
    </insert>
	
	<select id="emailCheck" resultType="int">
        SELECT COUNT(*) AS CNT FROM USERS WHERE EMAIL = #{email}
    </select>
	
</mapper>