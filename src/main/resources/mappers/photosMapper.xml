<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.PhotosDao">


<select id="getAllPhotos" resultType="vo.PhotosVo">

	SELECT * FROM PHOTO WHERE USERID = #{userid} order by PHOTOID desc

</select>

<select id="getAllLimitPhotos" resultType="vo.PhotosVo">

	SELECT * FROM PHOTO WHERE USERID = #{userid} order by PHOTOID DESC LIMIT #{limit}, 12 

</select>

<select id="getPhotoTags" resultType="vo.PhotoTagsJoinVo">

	SELECT P.PHOTOID, T.TAGSID, T.TAGSNAMEKO FROM PHOTOTAGS P JOIN TAGSLOCALE T
    ON P.TAGSID = T.TAGSID
    WHERE PHOTOID = #{photoid}

</select>

<select id="getLikeCount" resultType="Integer">
	select IFNULL(sum(l.LikeYn),0) as likecount
	from photo p join likes l
	on p.photoid = l.photoid
	and p.photoid = #{photoid}
</select>

<select id="getCommentCount" resultType="Integer">
	select count(photoid) as commentcount 
	from comments 
	where photoid= #{photoid}
</select>

<select id="getFollowerCount" resultType="Integer">
	select count(followerid) as count 
	from follower 
	where usersuserid = #{userid}
</select>

<select id="getFollowingCount" resultType="Integer">
	select count(FollowingId) as count 
	from following 
	where UsersUserid = #{userid}
</select>

<select id="getLimitPhotoLikes" resultType="vo.PhotosVo">
	SELECT P.PHOTOID, P.FILENAME, P.DESCRIPTION, P.REFPHOTOID, P.REFPRODUCTID, P.CREATEDATE, P.UPDATEDATE, L.USERSUSERID, L.LIKEYN, L.BUYYN 
	FROM PHOTO P JOIN LIKES L 
	ON P.PHOTOID = L.PHOTOID 
	WHERE USERSUSERID = #{userid} AND LIKEYN = 1
	ORDER BY PHOTOID DESC
	LIMIT #{limit}, 12
</select>

<select id="getPhotoLikes" resultType="vo.PhotosVo">
	SELECT P.PHOTOID, P.FILENAME, P.DESCRIPTION, P.REFPHOTOID, P.REFPRODUCTID, P.CREATEDATE, P.UPDATEDATE, L.USERSUSERID, L.LIKEYN, L.BUYYN 
	FROM PHOTO P JOIN LIKES L 
	ON P.PHOTOID = L.PHOTOID 
	WHERE USERSUSERID = #{userid} AND LIKEYN = 1
	ORDER BY PHOTOID DESC
</select>

<select id="getPhoto" resultType="vo.PhotosVo">
    SELECT PHOTOID, FILENAME, DESCRIPTION, REFPHOTOID, REFPRODUCTID, CONVERT_TZ(CREATEDATE, "+0:00", "-9:00") AS CREATEDATE, 
            DATEDIFF(NOW(),CREATEDATE) AS DATEDIFF, UPDATEDATE, USERID 
    FROM PHOTO 
    WHERE PHOTOID = #{photoid}
</select>

<select id="getAllComments" resultType="vo.CommentsVo">
	SELECT COMMENTSID, COMMENTS, BUYYN, CREATEDATE, UPDATEDATE, PHOTOID, USERSUSERID 
	FROM COMMENTS 
	WHERE PHOTOID = #{photoid}
	ORDER BY COMMENTSID DESC
</select>

<select id="getAllCommentsJoin" resultType="vo.CommentsjoinVo">
	SELECT C.COMMENTSID, C.COMMENTS, C.BUYYN, CONVERT_TZ(CREATEDATE, "+0:00", "-9:00") AS CREATEDATE, DATEDIFF(NOW(),CREATEDATE) AS DATEDIFF, 
			C.UPDATEDATE, C.PHOTOID, C.USERSUSERID, P.PHOTONAME 
	FROM COMMENTS C JOIN PROFILE P ON C.USERSUSERID = P.USERID 
	WHERE C.PHOTOID = #{photoid}
</select>

<select id="getCommentsJoin" parameterType="HashMap" resultType="vo.CommentsjoinVo">
	SELECT C.COMMENTSID, C.COMMENTS, C.BUYYN, CONVERT_TZ(CREATEDATE, "+0:00", "-9:00") AS CREATEDATE, DATEDIFF(NOW(),CREATEDATE) AS DATEDIFF, 
			C.UPDATEDATE, C.PHOTOID, C.USERSUSERID, P.PHOTONAME 
	FROM COMMENTS C JOIN PROFILE P ON C.USERID = P.USERID 
	WHERE C.PHOTOID = #{photoid} AND C.USERSUSERID = #{userid}
</select>

<select id="getFollowing" parameterType="HashMap" resultType="vo.FollowingVo">
	SELECT * FROM FOLLOWING 
	WHERE FOLLOWINGID = #{followingid} AND USERSUSERID = #{usersuserid}
</select>

<select id="getReposts" resultType="vo.RepostsVo">
	SELECT PHOTOID, USERSUSERID, BUYYN 
	FROM REPOSTS 
	WHERE USERSUSERID = #{userid}
</select>

<select id="getAllFeedPhotos" resultType="vo.CommentsPhotoIdjoinVo">
    SELECT PHOTOID, FILENAME, DESCRIPTION, REFPHOTOID, REFPRODUCTID, REFSHOPID, REFLINK, 
    DATEDIFF(NOW(),CREATEDATE) AS DATEDIFF, CONVERT_TZ(CREATEDATE, "+0:00", "-9:00") AS CREATEDATE, UPDATEDATE, USERID
    FROM PHOTO
    WHERE USERID IN (
       SELECT FOLLOWINGID
       FROM FOLLOWING
       WHERE USERSUSERID= #{userid}
    )
    ORDER BY CREATEDATE DESC;
</select>

<select id="getFeedLikeCount" resultType="vo.FeedLikesVo">
    SELECT L.PHOTOID, SUM(LIKEYN) AS CNT
    FROM PHOTO P JOIN LIKES L
    ON P.PHOTOID = L.PHOTOID
    WHERE P.USERID IN (
       SELECT FOLLOWINGID
       FROM FOLLOWING
       WHERE USERSUSERID = #{userid}
    )
    GROUP BY P.PHOTOID
    ORDER BY P.CREATEDATE DESC;
</select>

<insert id="insertLikes" parameterType="vo.LikesVo">
	INSERT INTO LIKES (PHOTOID, USERSUSERID, LIKEYN, BUYYN) 
	VALUES (#{photoId},#{usersUserId},#{likeYn},#{buyYn})
</insert>

<insert id="insertComments" parameterType="vo.CommentsVo">
	INSERT INTO COMMENTS (COMMENTS, BUYYN, CREATEDATE, UPDATEDATE, PHOTOID, USERSUSERID) 
	VALUES (#{comments},#{buyYn}, NOW(), NOW(), #{photoId}, #{usersUserid})
</insert>

<insert id="insertPhotos" parameterType="vo.PhotosVo">
	INSERT INTO photo (FILENAME, DESCRIPTION, CREATEDATE, UPDATEDATE, USERID) 
	VALUES (#{fileName}, #{descripTion}, NOW(), NOW(), #{userId})
</insert>

<insert id="insertFollow" parameterType="vo.FollowingVo">
	INSERT INTO FOLLOWING(FOLLOWINGID, USERSUSERID) 
	VALUES(#{FollowingId}, #{UsersUserid});
</insert>

<insert id="insertReposts" parameterType="HashMap">
	INSERT INTO REPOSTS
	VALUES (#{photoid}, #{userid}, #{buyyn});
</insert>

<insert id="insertRepostsPhotos" parameterType="HashMap">
	INSERT INTO PHOTO(FILENAME, DESCRIPTION, REFPHOTOID, CREATEDATE, UPDATEDATE, USERID)
	SELECT FILENAME, #{reposts}, PHOTOID AS REFPHOTOID, NOW(), NOW(), #{userid} AS USERD
	FROM PHOTO
	WHERE PHOTOID=#{photoid};
</insert>

<select id="getLikeCheck" parameterType="HashMap" resultType="vo.LikesVo">
	SELECT PHOTOID, USERSUSERID, LIKEYN, BUYYN 
	FROM LIKES 
	WHERE PHOTOID = #{photoid} AND USERSUSERID = #{userid}
</select>

<update id="getLikeCheckOk" parameterType="HashMap">
	UPDATE LIKES
	SET LIKEYN = #{likeyn}
	WHERE PHOTOID = #{photoid} AND USERSUSERID = #{userid}
</update>

<delete id="deleteFollow" parameterType="vo.FollowingVo">
	DELETE FROM FOLLOWING 
	WHERE FOLLOWINGID = #{FollowingId} AND USERSUSERID = #{UsersUserid};
</delete>

<delete id="deleteRepost" parameterType="HashMap">
	DELETE FROM REPOSTS 
	WHERE USERSUSERID = #{userid} AND PHOTOID = #{photoid};
</delete>

<update id="udatePhotoProfile" parameterType="HashMap">	
	UPDATE PROFILE
		SET  PHOTONAME = #{fileName}
	WHERE USERID  = #{userid}
</update>

<insert id="insertCoordinates" parameterType="vo.PhotoRegisterVo">
	<selectKey order="BEFORE" keyProperty="photoId"
			resultType="BigInteger">
			SELECT MAX(PHOTOID) FROM PHOTO
	</selectKey>
	INSERT INTO COORDINATES (PHOTOID, AX1, AX2, AY1, AY2, BX1, BX2, BY1, BY2, AREFPRODUCTID, AREFSHOPID, AREFLINK, BREFPRODUCTID, BREFSHOPID, BREFLINK) 
	VALUES (#{photoId},#{Ax1}, #{Ax2}, #{Ay1}, #{Ay2}, #{Bx1}, #{Bx2}, #{By1}, #{By2}, #{ARefProductId}, #{ARefShopid}, #{ARefLink}, #{BRefProductId}, #{BRefShopid}, #{BRefLink})
	
</insert>

<select id="getCoordinates" resultType="vo.PhotoRegisterVo" parameterType="BigInteger">
	SELECT *
	FROM COORDINATES 
	WHERE PHOTOID = #{photoId}
</select>

<delete id="deletePhoto" parameterType="HashMap">
	DELETE FROM PHOTO
	WHERE USERID = #{userid} AND PHOTOID = #{photoid}
</delete>

<select id="commentCount" resultType="Integer">
	SELECT COUNT(*) FROM COMMENTS WHERE PHOTOID = #{photoid}
</select>

<select id="searchUserid" resultType="String">
    SELECT DISTINCT USERID
    FROM PHOTO
    WHERE USERID LIKE CONCAT('%', #{keyword}, '%')
</select>

<select id="searchTagName" parameterType="hashMap" resultType="String">
    SELECT DISTINCT T.TAGSNAME${language}
   FROM TAGSLOCALE T JOIN PHOTOTAGS P
   ON T.TAGSID = P.TAGSID
   WHERE TAGSNAME${language} LIKE CONCAT('%', #{keyword}, '%')
</select>

<select id="searchPhotoTags" parameterType="hashMap" resultType="BigInteger">
    SELECT PHOTOID
    FROM PHOTOTAGS
    WHERE TAGSID IN (
        SELECT TAGSID
        FROM TAGSLOCALE
        WHERE TAGSNAME${language} LIKE CONCAT('%', #{keyword}, '%')
    )
</select>

<select id="searchPhotoTagsbyRanking" parameterType="hashMap" resultType="vo.RankingVo">
    SELECT L.PHOTOID, LIKES*W.WLINKS + BUYLIKES*W.WBUYLINKS + COMMENTS*W.WCOMMENTS + BUYCMTS*W.WBUYCMTS + REPOST*W.WREPOST + FOLLOWING*W.WFOLLOWING AS RANKING
     FROM (
    SELECT PHOTOID, IFNULL(LIKES/MAXLIKES,0) AS LIKES, IFNULL(BUYLIKES/MAXBUYLIKES,0) AS BUYLIKES, IFNULL(COMMENTS/MAXCOMMENTS,0) AS COMMENTS, IFNULL(BUYCMTS/MAXBUYCMTS,0) AS BUYCMTS, IFNULL(REPOST/MAXREPOST,0) AS REPOST, IFNULL(FOLLOWING/MAXFOLLOWING,0) AS FOLLOWING
            FROM VIEWPARAMS A JOIN
             (     
                SELECT MAX(LIKES) AS MAXLIKES, MAX(BUYLIKES) AS MAXBUYLIKES, MAX(COMMENTS) AS MAXCOMMENTS, MAX(BUYCMTS) AS MAXBUYCMTS, MAX(REPOST) AS MAXREPOST, MAX(BUYREPOST) AS MAXBUYREPOST, MAX(FOLLOWING) AS MAXFOLLOWING
                FROM VIEWPARAMS
            ) B
     ) L  JOIN  (
         SELECT WLINKS, WBUYLINKS, WCOMMENTS, WBUYCMTS, WREPOST, WFOLLOWING
        FROM WEIGHTS
        WHERE BASEDATE = (SELECT MAX(BASEDATE) FROM WEIGHTS)
        AND WEIGHTSID = 1
    ) W
     WHERE L.PHOTOID IN (
                SELECT PHOTOID
                FROM PHOTOTAGS
                WHERE TAGSID IN (
                    SELECT TAGSID
                    FROM TAGSLOCALE
                    WHERE TAGSNAME${language} LIKE CONCAT('%', #{keyword}, '%')
            )
        )
     ORDER BY RANKING DESC
</select>


</mapper>