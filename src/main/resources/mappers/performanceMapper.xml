<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.PerformanceDao">
	<insert id="insertPerformance">
		INSERT INTO PERFORMANCE(BASEDATE, USERS, SIGNUP, PHOTOVIEWS, PRDTPHOTO, BUYPHOTO, BUYSHOP, REBUY, SALES)
		SELECT DATE_FORMAT(US.BASEDATE, '%Y%m%d') AS BASEDATE, US.USERS, SG.SIGNUP, PH.PHOTOVIEWS, DV.PRDTPHOTO, BP.BUYPHOTO, BS.BUYSHOP, RB.REBUY, SL.SALES
		FROM (
			SELECT #{baseDate} AS BASEDATE, COUNT(USERID) AS USERS 
			FROM USERS
		) US JOIN
		(	
			SELECT #{baseDate} AS BASEDATE, COUNT(USERID) AS SIGNUP 
			FROM USERS
			WHERE CREATEDATE = #{baseDate}
		) SG ON US.BASEDATE = SG.BASEDATE
		     JOIN
		( 
			SELECT #{baseDate} AS BASEDATE, COUNT(URI) AS PHOTOVIEWS
			FROM LOGS
			WHERE DATE(DATETIME) = #{baseDate}
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',3), '/',-1) = 'photos'
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',6), '/',-1) !='products'
		) PH ON US.BASEDATE = PH.BASEDATE
		    JOIN
		(
			SELECT #{baseDate} AS BASEDATE, COUNT(URI) AS PRDTPHOTO
			FROM LOGS
			WHERE DATE(DATETIME) = #{baseDate}
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',3), '/',-1) = 'photos'
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',6), '/',-1) ='products'
		) DV ON US.BASEDATE = DV.BASEDATE
		   JOIN
		(
			SELECT #{baseDate} AS BASEDATE, COUNT(URI) AS BUYPHOTO
			FROM LOGS
			WHERE DATE(DATETIME) = #{baseDate}
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',3), '/',-1) = 'photos'
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',6), '/',-1) ='products'
			AND SUBSTRING_INDEX(URI,'/',-1) = 'buy'
		) BP ON US.BASEDATE = BP.BASEDATE
		     JOIN
		(
			SELECT #{baseDate} AS BASEDATE, COUNT(URI) AS BUYSHOP
			FROM LOGS
			WHERE DATE(DATETIME) = #{baseDate}
			AND SUBSTRING_INDEX(SUBSTRING_INDEX(URI,'/',3), '/',-1) = 'products'
			AND SUBSTRING_INDEX(URI,'/',-1) = 'buy'
		) BS ON US.BASEDATE = BS.BASEDATE
		      JOIN
		(
			SELECT #{baseDate} AS BASEDATE, COUNT(URI) AS REBUY
			FROM LOGS
			WHERE DATE(DATETIME) = #{baseDate}
			AND SUBSTRING_INDEX(URI,'/',-1) = 'buy'
			AND USERID IN (
				SELECT B.USERID
				FROM BASKETS  B JOIN BUYITEMS  I
				ON B.BASKETID = I.BASKETID
				WHERE I.ORDERSTATUSCODE='OR07'
		    )
		) RB ON US.BASEDATE = RB.BASEDATE
		     JOIN
		(
			SELECT #{baseDate} AS BASEDATE, IFNULL(SUM(I.UNITPRICE*I.QUANTITY),0) AS SALES    
			FROM BASKETS  B JOIN BUYITEMS  I
			ON B.BASKETID = I.BASKETID
			WHERE B.CREATEDATE = #{baseDate}
			AND I.ORDERSTATUSCODE='OR03'
		) SL ON US.BASEDATE = SL.BASEDATE
	</insert>
	
	<select id="getPerformance" resultType="vo.PerformanceVo">
		SELECT BASEDATE, USERS, SIGNUP, PHOTOVIEWS, PRDTPHOTO, BUYPHOTO, BUYSHOP, REBUY, SALES 
		FROM PERFORMANCE
<!-- 		WHERE BASEDATE BETWEEN #{fromDate} AND #{toDate} -->
	</select>
	
	<select id="getPerformanceCount" resultType="int">
		SELECT count(*) 
		FROM PERFORMANCE
	</select>		
	
	<insert id="insertViewParams">
		CREATE OR REPLACE VIEW  VIEWPARAMS AS
		SELECT P.PHOTOID, SUM(L.LIKEYN) AS LIKES, SUM(IFNULL(L.BUYYN,0)) AS BUYLIKES, COUNT(C.COMMENTSID) AS COMMENTS, 
		       SUM(IFNULL(L.BUYYN,0)) AS BUYCMTS,  COUNT(R.PHOTOID) AS REPOST, SUM(IFNULL(R.BUYYN,0)) AS BUYREPOST, F.FOLLOWING
		FROM PHOTO P LEFT JOIN LIKES L  ON P.PHOTOID = L.PHOTOID
					 LEFT JOIN COMMENTS C ON P.PHOTOID = C.PHOTOID
                     LEFT JOIN REPOSTS R ON P.PHOTOID = R.PHOTOID
                     LEFT JOIN (
						SELECT FOLLOWINGID, COUNT(USERSUSERID) AS FOLLOWING
						FROM FOLLOWING
						GROUP BY FOLLOWINGID
	                 ) F ON P.USERID = F.FOLLOWINGID
		GROUP BY P.PHOTOID
	</insert>
	
	<select id="getNormalizedParams" resultType="vo.ViewParamsVo">
		SELECT #{baseDate} AS BASEDATE, PHOTOID, IFNULL(LIKES/MAXLIKES,0) AS LIKES, IFNULL(BUYLIKES/MAXBUYLIKES,0) AS BUYLIKES, 
		       IFNULL(COMMENTS/MAXCOMMENTS,0) AS COMMENTS, IFNULL(BUYCMTS/MAXBUYCMTS,0) AS BUYCMTS, IFNULL(REPOST/MAXREPOST,0) AS REPOST, 
		       IFNULL(FOLLOWING/MAXFOLLOWING,0) AS FOLLOWING
		FROM VIEWPARAMS A JOIN
		 ( 	
			SELECT MAX(LIKES) AS MAXLIKES, MAX(BUYLIKES) AS MAXBUYLIKES, MAX(COMMENTS) AS MAXCOMMENTS, MAX(BUYCMTS) AS MAXBUYCMTS, MAX(REPOST) AS MAXREPOST, MAX(BUYREPOST) AS MAXBUYREPOST, MAX(FOLLOWING) AS MAXFOLLOWING
		    FROM VIEWPARAMS
		) B
	</select>
	
	<select id="getRanking" parameterType="vo.WeightsVo" resultType="vo.RankingVo">
		SELECT PHOTOID, LIKES*#{wLikes} + BUYLIKES*#{wBuyLikes} + COMMENTS*#{wComments} + BUYCMTS*#{wBuyCmts} + REPOST*#{wRepost} + FOLLOWING*#{wFollowing} AS RANKING
		FROM (
		SELECT PHOTOID, IFNULL(LIKES/MAXLIKES,0) AS LIKES, IFNULL(BUYLIKES/MAXBUYLIKES,0) AS BUYLIKES, IFNULL(COMMENTS/MAXCOMMENTS,0) AS COMMENTS, IFNULL(BUYCMTS/MAXBUYCMTS,0) AS BUYCMTS, IFNULL(REPOST/MAXREPOST,0) AS REPOST, IFNULL(FOLLOWING/MAXFOLLOWING,0) AS FOLLOWING
				FROM VIEWPARAMS A JOIN
				 ( 	
					SELECT MAX(LIKES) AS MAXLIKES, MAX(BUYLIKES) AS MAXBUYLIKES, MAX(COMMENTS) AS MAXCOMMENTS, MAX(BUYCMTS) AS MAXBUYCMTS, MAX(REPOST) AS MAXREPOST, MAX(BUYREPOST) AS MAXBUYREPOST, MAX(FOLLOWING) AS MAXFOLLOWING
				    FROM VIEWPARAMS
				) B
		 ) L      
		 ORDER BY RANKING DESC	
	</select>
	
	<select id="insertWeights" parameterType="vo.WeightsVo">
		INSERT INTO WEIGHTS(BASEDATE, WLINKS, WBUYLINKS, WCOMMENTS, WBUYCMTS, WREPOST, WFOLLOWING)
		VALUES(#{baseDate}, #{wLikes}, #{wBuyLikes}, #{wComments}, #{wBuyCmts}, #{wRepost}, #{wFollowing})
	</select>
</mapper>